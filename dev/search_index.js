var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SearchModels","category":"page"},{"location":"#SearchModels","page":"Home","title":"SearchModels","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Provides a generic method for minimizing model errors using stochastic search, which is often used whenever the problem has no concept of derivative. This kind of problems rely on large exploration of combinatorial spaces based on error function.","category":"page"},{"location":"","page":"Home","title":"Home","text":"SearchModels rely on basic exploration functions that can be specified for many applications.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Due to its generic specification, other kind of optimization problems can be also solved, however, it could be easier and better to use other approaches.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SearchModels]","category":"page"},{"location":"#SearchModels.combine_configurations","page":"Home","title":"SearchModels.combine_configurations","text":"combine_configurations(c1, c2)\n\nCombines two configurations into a single one.\n\n\n\n\n\n","category":"function"},{"location":"#SearchModels.combine_configurations-Union{Tuple{T}, Tuple{T,AbstractArray{T,1} where T}} where T","page":"Home","title":"SearchModels.combine_configurations","text":"combine_configurations(a, L::AbstractVector)\n\nCombines the first configuration (1st argument) with some of the given list of pairs (config => score), The a config is always at the end of L and also L is always shuffled. If you are in doubt, use the higher level interface combine_configurations(c1, c2).\n\n\n\n\n\n","category":"method"},{"location":"#SearchModels.config_type-Tuple{T} where T","page":"Home","title":"SearchModels.config_type","text":"config_type(::T)\n\nConfig type identifier, it may or not be a type\n\n\n\n\n\n","category":"method"},{"location":"#SearchModels.evaluate_queue-Tuple{Function,Any,Any,Any,Any}","page":"Home","title":"SearchModels.evaluate_queue","text":"evaluate_queue(error_function, evalqueue, population, config_and_errors, parallel)\n\nEvaluates queue of using error_function; the resulting config => errors pairs are pushed into the population.\n\n\n\n\n\n","category":"method"},{"location":"#SearchModels.mutate_configuration-Tuple{AbstractSolutionSpace,Any,Any}","page":"Home","title":"SearchModels.mutate_configuration","text":"mutate_configuration(space::AbstractSolutionSpace, config, iter::Integer)\nmutate_configuration(space::AbstractVector, c, iter)\n\nMutates configuration. If space is a list of spaces, then the proper space is determined.\n\n\n\n\n\n","category":"method"},{"location":"#SearchModels.push_config!-NTuple{4,Any}","page":"Home","title":"SearchModels.push_config!","text":"push_config!(accept_config, conf, evalqueue, observed)\n\nPushes conf into the evaluation queue. It checks if was already observed and if it is accepted by the accept_config predicate.\n\n\n\n\n\n","category":"method"},{"location":"#SearchModels.random_configuration","page":"Home","title":"SearchModels.random_configuration","text":"random_configuration(space::AbstractSolutionSpace)\n\nCreates a random configuration sampling the given space\n\n\n\n\n\n","category":"function"},{"location":"#SearchModels.scale-Tuple{T} where T<:AbstractFloat","page":"Home","title":"SearchModels.scale","text":"scale(x, s=1.1; p1=0.5, p2=0.5, lower=typemin(T), upper=typemax(T))::T\n\nWith probability p1 xis scaled bys; ifxis going to be scaled, then with probabilityp2x` is growth (or reduced otherwise). Minimum and maximum values can be specified.\n\n\n\n\n\n","category":"method"},{"location":"#SearchModels.search_models","page":"Home","title":"SearchModels.search_models","text":"search_models(\n    space::AbstractSolutionSpace,\n    error_function::Function,  # receives only the configuration to be population\n    initialpopulation=32;\n    maxpopulation=initialpopulation,\n    accept_config::Function=config->true,\n    inspect_population::Function=(space, population) -> nothing,\n    bsize=initialpopulation,\n    mutbsize=4,\n    crossbsize=4,\n    maxiters=300,\n    tol=0.001,\n    verbose=true,\n    parallel=:none # :none, :threads, :distributed\n)\n\nExplores the search space trying to minimize the given error function. The procedure consists on an iterative stochastic method based on an evolutionary algorithm. It is starts with initialpopulation configurations, evaluate them mutate and cross them; it selects at most maxpopulation configurations at any iteration (best ones).\n\nspace: Search space definition\nerror_function: the function to minimize (receives the configuration as argument)\ninitialpopulation: initial number of configurations to conform the population\nmaxpopulation: the maximum number of configurations to be kept at each iteration (based on its minimum error)\naccept_config: an alternative way to deny some configuration to be evaluated (receives the configuration as argument)\ninspect_population: observes the population after evaluating a beam of solutions\nbsize: number of best items to be used for mutation and crossing procedures\nmutbsize: number of new configurations per iteration from a mutation procedure\ncrossbsize: number of new configurations per iteration from a crossing procedure\nmaxiters: maximum iterations of the search procedure\ntol: stop search tolerance to population errors on the best maxpopulation configurations; negative values will force to evaluate maxiters\nverbose: controls if the verbosity of the search iterations\nparallel: controls if the search is made with some kind of parallel strategy (only used for evaluation errors). Valid values are:\n:none: there is no parallelization, the default value\n:threads: evaluates error functions using threads\n:distributed: evaluates error functions using a distributed environment (using the available workers)\n\n\n\n\n\n","category":"function"},{"location":"#SearchModels.translate-Tuple{T} where T<:Real","page":"Home","title":"SearchModels.translate","text":"translate(x::T; s=2, p1=0.5, p2=0.5, lower=typemin(T), upper=typemax(T)) where {T<:Real}\n\nWith probability p1 x is modified; if x is modified, then with probability p2 returns x+s or x-s otherwise. Minimum and maximum values can be specified.\n\n\n\n\n\n","category":"method"}]
}
